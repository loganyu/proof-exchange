// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Question {
  id            String    @id @default(cuid())
  title         String
  content       String
  published     Boolean   @default(false)
  bountyAwarded Boolean   @default(false)
  author        User?     @relation(fields: [authorId], references: [id])
  authorId      String?
  comments      Comment[]
  votes         Vote[]
  Tag           Tag[]
}

model Answer {
  id        String    @id @default(cuid())
  title     String
  content   String
  published Boolean   @default(false)
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  comments  Comment[]
  votes     Vote[]
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  author     User?     @relation(fields: [authorId], references: [id])
  authorId   String?
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?
  answer     Answer?   @relation(fields: [answerId], references: [id])
  answerId   String?
  votes      Vote[]
}

model Vote {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  question   Question? @relation(fields: [questionId], references: [id])
  comment    Comment?  @relation(fields: [commentId], references: [id])
  answer     Answer?   @relation(fields: [answerId], references: [id])
  userId     String
  questionId String?
  commentId  String?
  answerId   String?
}

model Tag {
  id         String    @id @default(cuid())
  name       String
  author     User?     @relation(fields: [authorId], references: [id])
  authorId   String?
  category   Category
  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?

  @@unique([name, category])
}

enum Category {
  NFTS
  TECH
  TRADING
  DEFI
  OTHER
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String     @id @default(cuid())
  pubKey        String?    @unique
  profilePubkey String?    @unique
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  sessions      Session[]
  questions     Question[]
  answers       Answer[]
  comments      Comment[]
  votes         Vote[]
  Account       Account[]
  Tag           Tag[]

  @@map(name: "users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
